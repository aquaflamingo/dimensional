import { useState, Suspense } from "react";
import Head from "next/head";
import { useEffect } from "react";
import styles from "../styles/Home.module.css";
import { BaseURL, GetProfileSummary, ListProfiles } from "../utils/urls";
import useFetch, { Provider } from "use-http";
import { ProfileFixture, PersonalityFixture } from "../fixtures";
import Image from "next/image";
import SearchBar from "../components/Search";

export default function Home() {
  return (
    <>
      <Head>
        <title>Dimensional</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <div className="container mx-auto z-0">
          <ApplicationHeader />
          <Profile />
        </div>
      </main>
    </>
  );
}

const ApplicationHeader = () => {
  return (
    <nav className="px-2 sm:px-4 py-2.5 rounded h-32 z-10">
      <div className="container flex flex-wrap items-center justify-between mx-auto">
        <a href="#" className="flex items-center">
          <Image src="/logo.png" width="100" height="54" />
        </a>
        <div
          className="w-auto md:block md:w-auto py-5 h-32"
          id="navbar-default"
        >
          <SearchBar />
        </div>
      </div>
    </nav>
  );
};

type ElementSVGProps = {
  fill: string;
};

const ElementSVG = ({ fill }: ElementSVGProps) => {
  return (
    <div className="flex w-full justify-center">
      <svg width="64" height="64">
        <circle
          cx="32"
          cy="32"
          r="15"
          stroke={fill}
          strokeWidth="24"
          fill="none"
        />
      </svg>
    </div>
  );
};

type ElementCellProps = {
  fill: string;
  element: string;
};

const ElementCell = ({ element, fill }: ElementCellProps) => {
  // TODO style
  return (
    <div className="box-border h-32 p-4 border-2 md:w-32">
      <ElementSVG fill={fill} />
      <p className="text-center text-xs">{element}</p>
    </div>
  );
};

// Traits and elements are the same?
export interface Element {
  name: string;
  colorHexCodes: string[];
  score: number | null;
}

type EndorsedElementsGridProps = {
  elements: Element[];
};

const EndorsedElements = ({ elements }: EndorsedElementsGridProps) => {
  const renderCells = (elements: Element[]) => {
    let results = [];

    for (let i = 0; i < elements.length; i++) {
      let t = elements[i];
      let fill = t.colorHexCodes.length > 0 ? t.colorHexCodes[0] : "#FFF";

      results.push(
        <li className="list-none" key={i}>
          <ElementCell element={t.name} fill={fill} />
        </li>
      );
    }

    return results;
  };

  return (
    <div>
      <h3 className="text-lg py-2">Most Endorsed Elements</h3>
      <div className="md:grid md:grid-cols-6 flex overflow-x-auto gap-1">
        {elements && elements.length > 0
          ? renderCells(elements)
          : "No elements found"}
      </div>
    </div>
  );
};

type PersonalityTraitCellProps = {
  trait: Trait;
};

const PersonalityTraitCell = ({ trait }: PersonalityTraitCellProps) => {
  // TODO slashes missing and highlight
  const renderTraitValue = (tv: TraitValue[]) => {
    let results = tv.map((tv: TraitValue) => {
      if (!tv.highlighted) {
        return <span className="text-gray-500">{tv.text} </span>;
      } else {
        return <span className="decoration-white">{tv.text} </span>;
      }
    });

    return results;
  };

  return (
    <div className="grid grid-cols-2 py-2 border-solid border-2 border-sky-50">
      <div className="text-left px-2">
        <p>{trait.traitName}</p>
      </div>
      <div className="text-right px-2">
        <p>{renderTraitValue(trait.traitValues)}</p>
      </div>
    </div>
  );
};

interface TraitValue {
  text: string;
  highlighted: boolean;
}

interface Trait {
  traitName: string;
  traitValues: TraitValue[];
}

const PersonalityTraitList = ({ traits }: PersonalitySummaryTableProps) => {
  const renderCells = (traits: Trait[]) => {
    let results = [];

    for (let i = 0; i < traits?.length; i++) {
      let t = traits[i];

      results.push(
        <li key={i}>
          <PersonalityTraitCell trait={t} />
        </li>
      );
    }

    return results;
  };

  return (
    <ul className="list-none">
      {traits && traits.length > 0 ? (
        renderCells(traits)
      ) : (
        <p>No traits found</p>
      )}
    </ul>
  );
};

type PersonalitySummaryTableProps = {
  traits: Trait[];
};

const PersonalitySummaryTable = ({ traits }: PersonalitySummaryTableProps) => {
  return (
    <div>
      <div>
        <h3 className="text-lg bg-gray-50 text-black px-2 py-2">
          Personality Summary
        </h3>
      </div>
      <PersonalityTraitList traits={traits} />
    </div>
  );
};

type AdjectivesListProps = {
  adjectives: string[];
};

const AdjectivesList = ({ adjectives }: AdjectivesListProps) => {
  return (
    <div>
      <h3 className="text-lg">Adjectives</h3>
      <p>
        {adjectives && adjectives.length > 0
          ? adjectives.join(", ")
          : "No adjectives given"}
      </p>
    </div>
  );
};

type ProfileContentProps = {
  // TODO
  profile: UserProfileResponse;
  personality: UserPersonalityResponse;
};

const ProfileContent = ({ personality, profile }: ProfileContentProps) => {
  const adjs: string[] = profile?.adjectives;
  const elements: Element[] = profile?.mostEndorsedElements;
  const descriptors: Trait[] = personality.summaryTableRows.map((row) => {
    let values: TraitValue[] = row.values.map((v) => {
      return { text: v.text, highlighted: v.isHighlighted };
    });

    return { traitName: row.title, traitValues: values };
  });

  return (
    <div className="col-span-3 py-3 space-y-4 px-5 md:px-10">
      <ProfileHeader
        userName={profile?.userName}
        profileUrl={profile?.profileUrl}
      />
      <PersonalitySummaryTable traits={descriptors} />
      <EndorsedElements elements={elements} />
      <AdjectivesList adjectives={adjs} />
    </div>
  );
};

type ProfileHeaderProps = {
  userName: string;
  profileUrl: string;
};

const ProfileHeader = ({ userName, profileUrl }: ProfileHeaderProps) => {
  return (
    <div className="space-y-1">
      <h1 className="text-5xl">{userName}</h1>
      <h2 className="text-lg">{profileUrl}</h2>
    </div>
  );
};

interface UserProfileResponse {
  description: string;
  userName: string;
  profileUrl: string;
  adjectives: string[];
  id: string;
  mostEndorsedElements: Element[];
}

interface SummaryTableValue {
  text: string;
  isHighlighted: boolean;
}

interface SummaryTableRow {
  title: string;
  values: SummaryTableValue[];
}

interface UserPersonalityResponse {
  summaryTableRows: SummaryTableRow[];
}

const Profile = () => {
  const [profile, setProfile] = useState<UserProfileResponse>();
  const [personality, setPersonality] = useState<UserPersonalityResponse>();

  useEffect(() => {
    setProfile(ProfileFixture[0]);
    setPersonality(PersonalityFixture);
  }, []);

  return (
    <Provider url={BaseURL}>
      <Suspense fallback="Loading...">
        {profile && personality && (
          <div className="md:grid md:grid-cols-4 md:gap-5 px-5 z-0">
            <ProfileBio description={profile.description} />
            <ProfileContent personality={personality} profile={profile} />
          </div>
        )}
      </Suspense>
    </Provider>
  );
};

type ProfileImageProps = {
  src: string;
};

const ProfileImage = ({ src }: ProfileImageProps) => {
  //TODO
  return (
    <div className="justify-center w-full py-5 flex">
      <Image
        src={src}
        width="150"
        height="150"
        className="rounded-full shadow-sm"
        alt=""
      />
    </div>
  );
};

type ProfileSummaryProps = {
  description: string;
};

const ProfileBio = ({ description }: ProfileSummaryProps) => {
  // None given in the API
  const profileImage = "/profileimage.png";

  return (
    <div className="col-span-1">
      <ProfileImage src={profileImage} />
      <p className="md:text-left sm:text-center px-5">
        {description ? description : "No description provided"}
      </p>
    </div>
  );
};
