import { useState, Suspense } from "react"
import Head from 'next/head'
import { useEffect } from 'react'
import styles from '../styles/Home.module.css'
import { BrandURL } from "../utils/constants"
import { BaseURL, GetProfileSummary, ListProfiles } from "../utils/urls"
import useFetch, { Provider } from 'use-http'
import {
	Profiles, 
	PersonalitySummary,
	Traits 
} from "../fixtures"

export default function Home() {
	return (
		<>
			<Head>
				<title>Dimensional</title>
				<meta name="description" content="Generated by create next app" />
				<meta name="viewport" content="width=device-width, initial-scale=1" />
				<link rel="icon" href="/favicon.ico" />
			</Head>
			<main className={styles.main}>
				<div className="container mx-auto">
					<ApplicationHeader/>
					<Profile/>
				</div>
			</main>
		</>
	)
}


const ApplicationHeader = () => {
	return (
		<nav className="bg-white border-gray-200 px-2 sm:px-4 py-2.5 rounded dark:bg-gray-900">
			<div className="container flex flex-wrap items-center justify-between mx-auto">
				<a href="#" className="flex items-center">
					<img src={BrandURL} width="100" height="54"/>
				</a>
				<div className="hidden w-full md:block md:w-auto" id="navbar-default">
					<ul className="flex flex-col p-4 mt-4 border border-gray-100 rounded-lg bg-gray-50 md:flex-row md:space-x-8 md:mt-0 md:text-sm md:font-medium md:border-0 md:bg-white dark:bg-gray-800 md:dark:bg-gray-900 dark:border-gray-700">
						<li>
							<p>Search Bar here</p>
						</li>
					</ul>
				</div>
			</div>
		</nav>
	)
}

type ElementSVGProps = {
	fill: string
}

const ElementSVG = ({ fill }: ElementSVGProps) => {
	return (
		<div className="content-center" >
			<svg width="100" height="100">
				<circle cx="60" cy="50" r="20" stroke={fill} strokeWidth="20" fill="none" />
			</svg>	
		</div>
	)
}

type ElementCellProps = {
	fill: string 
	element: string
}

const ElementCell = ({ element, fill }: ElementCellProps) => {
	// TODO: border
	// TODO style
	return (
		<div className="border-solid border-2 py-3">
			<ElementSVG fill={fill}/>
			<p className="text-center">{element}</p>
		</div>
	)
}

// Traits and elements are the same?
type Element = {
	name: string
	hexCodes: string[]
	score: number | null
}

type EndorsedElementsGridProps = {
	elements: Element[]
}

const EndorsedElementsGrid = ({ elements }: EndorsedElementsGridProps) => {
	elements = [{name: "One", hexCodes: ["#fff"]}, {name: "Two", hexCodes: ["#f1f"]}]

	// TODO: grid styling
	const renderCells = (elements : Element[]) => {
		let results = []

		for (var i in elements) {
			let t = elements[i]

			results.push(
				<li key={i}>
					<ElementCell element={t.name} fill={t.hexCodes[0]}/>
				</li>
			)
		}

		return results
	}

	return (
		<div className="grid grid-cols-6">
			{ elements && elements.length > 0 ? renderCells(elements) : "No elements found" }
		</div>
	)
}

type PersonalityTraitCellProps = {
	traitName: string
	traitValue: string
}

const PersonalityTraitCell = ({traitName, traitValue}: PersonalityTraitCellProps) => {
	//TODO fix color
	// TODO content aligned wrong
	return (
		<div className="grid grid-cols-2 border-solid border-2 border-grey-500">
			<div className="content-start px-2">
				<p>{traitName}</p>
			</div>
			<div className="content-end px-2">
				<p>{traitValue}</p>
			</div>
		</div>
	)
}

type Trait = {
	traitName: string 
	traitValue: string
}

const PersonalityTraitList = ({ traitList } : PersonalitySummaryTableProps) => {
	// TODO model each item
	// TODO: default state without traits
	const renderCells = (traits : Trait[]) => {
		let results = []

		for (var i in traits) {
			let t = traits[i]

			results.push(
				<li key={i}>
					<PersonalityTraitCell traitName={t.traitName} traitValue={t.traitValue}/>
				</li>
			)
		}

		return results
	}

	//TODO: list style
	return (
		<ul className="list-none">
			{ renderCells([{traitName: "one", traitValue:"two"}]) }
		</ul>
	)
}

type PersonalitySummaryTableProps = {
	// Trait => value
	traitList: Map<string, string>
}

const PersonalitySummaryTable = ({ traitList }: PersonalitySummaryTableProps) => {
	// TODO: header background white
	// TODO items
	return (
		<div>
			<div>
				<h3>Personality Summary</h3>
			</div>
			<PersonalityTraitList traitList={traitList}/>
		</div>
	)
}

type AdjectivesListProps = {
	list: string[]
}

const AdjectivesList = ({ list }: AdjectivesListProps) => {
	return (
		<div>
		<h3>Adjectives</h3>
			<p>{list && list.length > 0 ? list.join(", ") : "No adjectives given"}</p>
		</div>
	)
}

// TODO: Profile

type Profile = {}

type ProfileContentProps = {
	content: Profile
}

const ProfileContent = ({ content }: ProfileContentProps) => {
	// TODO: hooks
	// TODO: css module 
	// TODO content
	return (
		<div className="col-span-3">
			<ProfileHeader />
			<hr/>
			<PersonalitySummaryTable />
			<EndorsedElementsGrid />
			<hr/>
			<AdjectivesList />
		</div>
	)
}

type ProfileHeaderProps = {
	userName: string 
	profileUrl: string 
}

const ProfileHeader = ({ userName, profileUrl }: ProfileHeaderProps) => {
	return (
		<div>
			<h1>{userName}</h1>
			<h2>{profileUrl}</h2>
		</div>
	)
}

type UserProfileResponse = {
	description: string
	userName: string
	profileUrl: string
	adjectives: string[]
	id: string
	mostEndorsedElements: Element[] 
}


const Profile = () => {
	useEffect(() => {

		}, [])

	return (
		<Provider url={BaseURL}>
			<Suspense fallback='Loading...'>
				<div className="grid grid-cols-4">
					<ProfileSummary />
					<ProfileContent />
				</div>
			</Suspense>
		</Provider>
	)
}

type ProfileImageProps = {
	src: string
}

const ProfileImage = ({ src }: ProfileImageProps) => {
	src = "https://randomuser.me/api/portraits/women/81.jpg"

	return (
		<div className="w-48 h-48">
			<img className="rounded-full shadow-sm" src={src} />
		</div>
	)
}

type ProfileSummaryProps = {
	profileImage: string 
	description: string
}

const ProfileSummary = ({ profileImage, description }: ProfileSummaryProps) => {
	// TODO mobile
	return (
		<div className="col-span-1">
			<ProfileImage src={profileImage}/>
			<p>{description ?  description : "No description provided" }</p>
		</div>
	)
}
